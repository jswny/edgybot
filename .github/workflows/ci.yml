name: CI
on: [push]

env:
  otp-version: "25.0.0"
  elixir-version: "1.14.2"
  python-version: "3.11"
  node-version: "14"

jobs:
  prepare-elixir:
    name: Prepare Elixir
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate-exact-version.outputs.version }}
      mix-cache-key: ${{ steps.generate-exact-version.outputs.mix-cache-key }}
    steps:
      - name: Generate Exact Version
        id: generate-exact-version
        run: |
          VERSION="${{ runner.os }}-otp-${{ env.otp-version }}-elixir-${{ env.elixir-version }}"
          MIX_CACHE_KEY="${VERSION}-build-mix-deps"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=mix-cache-key::${MIX_CACHE_KEY}

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
      - name: Install YAML Lint
        run: pip install yamllint
      - name: Run YAML Lint
        run: yamllint .

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}
      - name: Install Prettier
        run: npm install -g prettier
      - name: Check Formatting
        run: prettier --check .

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prepare-elixir
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v3
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-cache-key }}
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Compile
        run: mix compile

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: prepare-elixir
    services:
      db:
        image: postgres:13.1
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v3
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-cache-key }}
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Test
        run: mix test

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Check Formatting
        run: mix format --check-formatted

  dialyzer:
    name: Dialyzer
    runs-on: ubuntu-latest
    needs: prepare-elixir
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v3
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-cache-key }}
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache PLT
        uses: actions/cache@v3
        env:
          base-key: ${{ needs.prepare-elixir.outputs.version }}-build-plt
          plt-core-path: "_build/dev"
        with:
          path: |
            ${{ env.plt-core-path }}/*.plt
            ${{ env.plt-core-path }}/*.plt.hash
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Run Dialyzer
        run: mix dialyzer

  credo:
    name: Credo
    runs-on: ubuntu-latest
    needs: prepare-elixir
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v3
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-cache-key }}
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Run Credo
        run: mix credo --strict

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v1.6.0
        with:
          failure-threshold: style

  image:
    name: Image
    runs-on: ubuntu-latest
    env:
      cache-path: /tmp/.buildx-cache
      container-registry: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Image Metadata
        id: image-metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.container-registry }}/${{ github.repository }}
          flavor: |
            latest=auto
          tags: |
            type=edge
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Cache Image Layers
        uses: actions/cache@v3
        env:
          base-key: ${{ runner.os }}-build-docker-buildx
        with:
          path: ${{ env.cache-path }}
          key: ${{ env.base-key }}-${{ github.sha }}
          restore-keys: |
            ${{ env.base-key }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.container-registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          cache-from: type=local,src=${{ env.cache-path }}
          cache-to: type=local,dest=${{ env.cache-path }},mode=max
