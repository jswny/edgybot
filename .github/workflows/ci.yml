name: CI
on: [push]

env:
  OTP_VERSION: "23.2.3"
  ELIXIR_VERSION: "1.11.2"
  PYTHON_VERSION: "3.8"
  NODE_VERSION: "14"

jobs:
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install YAML Lint
        run: pip install yamllint
      - name: Run YAML Lint
        run: yamllint .
  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm install -g prettier
      - run: prettier --check .
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-build-mix-deps
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Compile
        run: mix compile
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13.1
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-build-mix-deps
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Test
        run: mix test
  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Check Formatting
        run: mix format --check-formatted
  dialyzer:
    name: Dialyzer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-build-mix-deps
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache PLT
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-build-plt
          plt-core-path: "_build/dev"
        with:
          path: |
            ${{ env.plt-core-path }}/*.plt
            ${{ env.plt-core-path }}/*.plt.hash
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Run Dialyzer
        run: mix dialyzer
  credo:
    name: Credo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Elixir
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-build-mix-deps
        with:
          path: deps
          key: ${{ env.base-key }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Run Credo
        run: mix credo --strict
  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Hadolint
        uses: brpaz/hadolint-action@master
  container:
    name: Container
    runs-on: ubuntu-latest
    env:
      cache-path: /tmp/.buildx-cache
      container-registry: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Container Metadata
        id: container-metadata
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.container-registry }}/${{ github.repository }}
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      - name: Cache Image Layers
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-build-docker-buildx
        with:
          path: ${{ env.cache-path }}
          key: ${{ env.base-key }}-${{ github.sha }}
          restore-keys: |
            ${{ env.base-key }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.container-registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container-metadata.outputs.tags }}
          labels: ${{ steps.container-metadata.outpus.labels }}
          cache-from: type=local,src=${{ env.cache-path }}
          cache-to: type=local,dest=${{ env.cache-path }},mode=max
