name: CI
on: [push]

env:
  otp-version: "27.0.0"
  elixir-version: "1.17"
  python-version: "3.12"
  node-version: "22.0"
  flyctl-version: "0.3.29"

jobs:
  prepare-elixir:
    name: Prepare Elixir
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate-exact-version.outputs.version }}
      mix-build-cache-key: ${{ steps.generate-exact-version.outputs.mix-build-cache-key }}
    steps:
      - name: Generate Exact Version
        id: generate-exact-version
        run: |
          VERSION="${{ runner.os }}-otp-${{ env.otp-version }}-elixir-${{ env.elixir-version }}"
          MIX_BUILD_CACHE_KEY="mix-build-${VERSION}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "mix-build-cache-key=${MIX_BUILD_CACHE_KEY}" >> $GITHUB_OUTPUT

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
      - name: Install YAML Lint
        run: pip install yamllint
      - name: Run YAML Lint
        run: yamllint .

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
      - name: Install Prettier
        run: npm install -g prettier
      - name: Check Formatting
        run: prettier --check .

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prepare-elixir
    env:
      MIX_ENV: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v4
        env:
          base-key: mix-deps-${{ runner.os }}
        with:
          path: deps
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache Mix Build
        uses: actions/cache@v4
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-build-cache-key }}-mix-env-${{ env.MIX_ENV }}
        with:
          path: _build/${{ env.MIX_ENV }}
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Compile
        run: mix compile

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: prepare-elixir
    env:
      MIX_ENV: test
    services:
      db:
        image: postgres
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v4
        env:
          base-key: mix-deps-${{ runner.os }}
        with:
          path: deps
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache Mix Build
        uses: actions/cache@v4
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-build-cache-key }}-mix-env-${{ env.MIX_ENV }}
        with:
          path: _build/${{ env.MIX_ENV }}
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Test
        run: mix test

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    needs: prepare-elixir
    env:
      MIX_ENV: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v4
        env:
          base-key: mix-deps-${{ runner.os }}
        with:
          path: deps
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache Mix Build
        uses: actions/cache@v4
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-build-cache-key }}-mix-env-${{ env.MIX_ENV }}
        with:
          path: _build/${{ env.MIX_ENV }}
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Check Formatting
        run: mix format --check-formatted

  dialyzer:
    name: Dialyzer
    runs-on: ubuntu-latest
    needs: prepare-elixir
    env:
      MIX_ENV: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v4
        env:
          base-key: mix-deps-${{ runner.os }}
        with:
          path: deps
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache Mix Build
        uses: actions/cache@v4
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-build-cache-key }}-mix-env-${{ env.MIX_ENV }}
        with:
          path: _build/${{ env.MIX_ENV }}
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache Dialyzer PLT
        uses: actions/cache@v4
        env:
          base-key: ${{ needs.prepare-elixir.outputs.version }}-dialyzer-plt
          plt-core-path: "_build/${{ env.MIX_ENV }}"
        with:
          path: |
            ${{ env.plt-core-path }}/*.plt
            ${{ env.plt-core-path }}/*.plt.hash
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Run Dialyzer
        run: mix dialyzer

  credo:
    name: Credo
    runs-on: ubuntu-latest
    needs: prepare-elixir
    env:
      MIX_ENV: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}
      - name: Cache Mix Dependencies
        uses: actions/cache@v4
        env:
          base-key: mix-deps-${{ runner.os }}
        with:
          path: deps
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Cache Mix Build
        uses: actions/cache@v4
        env:
          base-key: ${{ needs.prepare-elixir.outputs.mix-build-cache-key }}-mix-env-${{ env.MIX_ENV }}
        with:
          path: _build/${{ env.MIX_ENV }}
          key: ${{ env.base-key }}-lock-hash-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ env.base-key }}
      - name: Get Dependencies
        run: mix deps.get
      - name: Run Credo
        run: mix credo --strict

  image:
    name: Image
    runs-on: ubuntu-latest
    env:
      cache-path: /tmp/.buildx-cache
      container-registry: ghcr.io
    steps:
      - name: Image Metadata
        id: image-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.container-registry }}/${{ github.repository }}
          flavor: |
            latest=auto
          tags: |
            type=edge
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.container-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-beta:
    name: Deploy on Fly Beta
    runs-on: ubuntu-latest
    needs:
      - build
      - test
      - dialyzer
      - image
    if: github.ref != 'refs/heads/main'
    environment: beta
    concurrency:
      group: deploy-beta
      cancel-in-progress: true
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          version: ${{ env.flyctl-version }}
      - name: Deploy
        run: flyctl deploy --remote-only --app ${{ vars.FLY_APP_NAME }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-prod:
    name: Deploy on Fly Production
    runs-on: ubuntu-latest
    needs:
      - build
      - test
      - dialyzer
      - image
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency:
      group: deploy-prod
      cancel-in-progress: true
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          version: ${{ env.flyctl-version }}
      - name: Deploy
        run: flyctl deploy --remote-only --app ${{ vars.FLY_APP_NAME }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
